module.exports = {
    name: "flows",
    description: "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ—Ç–æ–∫–æ–≤.",
    permissionRequired: 2,
    opts: [{
        name: "create",
        description: "–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –ø–æ—Ç–æ–∫.",
        type: 1
    }, {
        name: "list",
        description: "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –Ω–∞ —ç—Ç–æ–º —Å–µ—Ä–≤–µ—Ä–µ –ø–æ—Ç–æ–∫–æ–≤.",
        type: 1
    }, {
        name: "delete",
        description: "–£–¥–∞–ª–∏—Ç—å —Ä–∞–Ω–µ–µ —Å–æ–∑–¥–∞–Ω–Ω—ã–π –ø–æ—Ç–æ–∫.",
        type: 1,
        options: [{
            name: "id",
            description: "Id –ø–æ—Ç–æ–∫–∞, –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å. (/flows list)",
            type: 3,
            required: true
        }]
    }],
    slash: true
};

const db = require("../database/")();
const { CommandInteraction } = require("discord.js");
const { flowWalkthrough, formatExplanation, limitTriggers, limitActions, limitFlows, generateID } = require("../constants/");

module.exports.run = async (interaction = new CommandInteraction) => {
    if (!(interaction instanceof CommandInteraction)) return;

    const gdb = await db.guild(interaction.guild.id);
    const cmd = interaction.options.getSubcommand();
    const { flows } = gdb.get();
    if (cmd == "create") {
        if (Object.keys(flows).length >= limitFlows) return interaction.reply({
            content: `‚ùå –í—ã –º–æ–∂–µ—Ç–µ –∏–º–µ—Ç—å —Ç–æ–ª—å–∫–æ ${limitFlows} –ø–æ—Ç–æ–∫–æ–≤.`,
            ephemeral: true
        });

        if (!interaction.guild.me.permissions.has("MANAGE_CHANNELS"))
            return interaction.reply({
                content: "‚ùå –£ –±–æ—Ç–∞ –Ω–µ—Ç—É –ø—Ä–∞–≤ –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–æ–≤.",
                ephemeral: true
            });

        const flowId = generateID(Object.keys(flows));
        const channel = await interaction.guild.channels.create("dob-flow-editor", {
            permissionOverwrites: [
                {
                    id: interaction.client.user.id,
                    allow: [
                        "VIEW_CHANNEL",
                        "SEND_MESSAGES",
                        "MANAGE_MESSAGES",
                        "EMBED_LINKS",
                        "READ_MESSAGE_HISTORY"
                    ]
                },
                {
                    id: interaction.user.id,
                    allow: [
                        "VIEW_CHANNEL",
                        "SEND_MESSAGES",
                        "READ_MESSAGE_HISTORY"
                    ]
                },
                {
                    id: interaction.guild.roles.everyone,
                    deny: [
                        "VIEW_CHANNEL"
                    ]
                }
            ]
        });
        await interaction.reply({
            content: `üåÄ –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ ${channel} –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–æ–≤–æ–≥–æ –ø–æ—Ç–æ–∫–∞.`,
            ephemeral: true
        });
        const newFlow = {
            triggers: Array(limitTriggers).fill(null),
            actions: Array(limitActions).fill(null)
        };
        const generateEmbed = async () => ({
            title: "üåÄ –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ—Ç–æ–∫–∞",
            description: [
                "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é –≤ –º–µ–Ω–µ–¥–∂–µ—Ä–µ –ø–æ—Ç–æ–∫–æ–≤! –Ø –ø–æ–º–æ–≥—É –í–∞–º –≤ —Å–æ–∑–¥–∞–Ω–∏–∏ –Ω–æ–≤–æ–≥–æ.",
                "–¢—Ä–∏–≥–≥–µ—Ä - —Ç–æ, —á—Ç–æ –∑–∞–¥–µ–π—Å—Ç–≤—É–µ—Ç \"–¥–µ–π—Å—Ç–≤–∏–µ\". –î–µ–π—Å—Ç–≤–∏–µ, —ç—Ç–æ —Ç–æ, —á—Ç–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—Å—è –ø–æ—Å–ª–µ –∑–∞–¥–µ–π—Å—Ç–≤–æ–≤–∞–Ω–∏—è –ø–æ—Ç–æ–∫–∞.",
                `–í—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å ${limitTriggers} —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤ –∏ ${limitActions} –¥–µ–π—Å—Ç–≤–∏–π –Ω–∞ –ø–æ—Ç–æ–∫.`
            ].join("\n\n"),
            fields: [
                {
                    name: "–ö–æ–º–∞–Ω–¥—ã",
                    value: [
                        "‚Ä¢ `edit <trigger –∏–ª–∏ action> <—Å–ª–æ—Ç>`: –ò–∑–º–µ–Ω–∏—Ç—å —Å–ª–æ—Ç —Ç—Ä–∏–≥–≥–µ—Ä–∞ –∏–ª–∏ –¥–µ–π—Å—Ç–≤–∏—è.",
                        "‚Ä¢ `save`: –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–æ—Ç–æ–∫ –∏ —É–¥–∞–ª–∏—Ç—å –∫–∞–Ω–∞–ª.",
                        "‚Ä¢ `cancel`: –û—Ç–º–µ–Ω–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Ç–æ–∫–∞ –∏ —É–¥–∞–ª–∏—Ç—å –∫–∞–Ω–∞–ª."
                    ].join("\n")
                },
                {
                    name: "–î–µ–π—Å—Ç–≤–∏—è",
                    value: cutFieldValue(await Promise.all(
                        newFlow.actions.map(async (action, index) =>
                            `${index + 1} - ${action ? `${await formatExplanation(action)}` : "**–ü—É—Å—Ç–æ**"}`
                        )
                    )),
                    inline: true
                },
                {
                    name: "–¢—Ä–∏–≥–≥–µ—Ä—ã",
                    value: cutFieldValue(await Promise.all(
                        newFlow.triggers.map(async (trigger, index) =>
                            `${index + 1} - ${trigger ? `${await formatExplanation(trigger)}` : "**–ü—É—Å—Ç–æ**"}`
                        )
                    )),
                    inline: true
                }
            ]
        });
        const pinned = await channel.send("–ó–∞–≥—Ä—É–∑–∫–∞...");

        await pinned.pin();
        const success = await flowWalkthrough(interaction.guild, interaction.user, channel, newFlow, generateEmbed, pinned);

        channel.delete();
        if (success) gdb.setOnObject("flows", flowId, newFlow);
        return interaction;
    } else if (cmd === "delete") {
        const flowId = interaction.options.getString("id");
        if (!flows[flowId])
            return interaction.reply({ content: "‚ùå –≠—Ç–æ—Ç –ø–æ—Ç–æ–∫ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.", ephemeral: true });

        gdb.removeFromObject("flows", flowId);

        return interaction.reply({
            content: `‚úÖ –ü–æ—Ç–æ–∫ \`${flowId}\` –±—ã–ª —É–¥–∞–ª—ë–Ω.`,
            ephemeral: (gdb.get().channel == interaction.channel.id)
        });
    } else if (cmd === "list") {
        const flowIds = Object.keys(flows).slice(0, limitFlows);

        if (flowIds.length) {
            return interaction.reply({
                embeds: [{
                    title: "–°–ø–∏—Å–æ–∫ –ø–æ—Ç–æ–∫–æ–≤",
                    description: `–£ –í–∞—Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ ${flowIds.length} –∏–∑ ${limitFlows} –ø–æ—Ç–æ–∫–æ–≤.`,
                    fields: await Promise.all(flowIds.map(async (flowId) => {
                        const val = ([
                            "**–¢—Ä–∏–≥–≥–µ—Ä—ã:**",
                            await formatTriggers(flows[flowId]),
                            "**–î–µ–π—Å—Ç–≤–∏—è:**",
                            await formatActions(flows[flowId])
                        ].join("\n").split("\n").map(l => `> ${l}`).join("\n") + "\n** **");
                        return ({
                            name: `–ü–æ—Ç–æ–∫ \`${flowId}\``,
                            value: cutFieldValue(val),
                            inline: true
                        });
                    }))
                }],
                components: [{
                    type: 1,
                    components: [{
                        type: 2,
                        emoji: {
                            name: "üóë"
                        },
                        style: 4,
                        custom_id: "reply:delete"
                    }]
                }]
            });
        } else return interaction.reply({ content: "‚ùå –ù–∞ —ç—Ç–æ–º —Å–µ—Ä–≤–µ—Ä–µ –Ω–µ—Ç—É –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö –ø–æ—Ç–æ–∫–æ–≤.", ephemeral: true });
    };
};

function cutFieldValue(value) {
    if (typeof value == "object") value = value.join("\n");
    if (value.length > 1024) return value.slice(0, 1014) + " **[...]**";
    else return value;
};

async function formatTriggers(flow) {
    const formatted = await Promise.all(flow.triggers.slice(0, limitTriggers).filter((t) => t).map(async (trigger) => `‚Ä¢ ${await formatExplanation(trigger)}`));
    return formatted.join("\n");
};

async function formatActions(flow) {
    const formatted = await Promise.all(flow.actions.slice(0, limitActions).filter((a) => a).map(async (action) => `‚Ä¢ ${await formatExplanation(action)}`));
    return formatted.join("\n");
};