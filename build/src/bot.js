"use strict";var __importDefault=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(exports,"__esModule",{value:!0}),exports.linkRates=exports.shard=exports.client=void 0,require("nodejs-better-console").overrideConsole();const fs_1=__importDefault(require("fs")),database_1=__importDefault(require("./database/")),discord_js_1=__importDefault(require("discord.js")),pretty_ms_1=__importDefault(require("pretty-ms")),Util_1=__importDefault(require("./util/Util")),tickers_1=__importDefault(require("./handlers/tickers")),lava_1=__importDefault(require("./handlers/lava")),prepareGuilds_1=__importDefault(require("./handlers/prepareGuilds")),slash_1=require("./handlers/interactions/slash");exports.client=new discord_js_1.default.Client({makeCache:discord_js_1.default.Options.cacheWithLimits({MessageManager:4096}),sweepers:{messages:{interval:300,lifetime:86400}},intents:["GUILDS","GUILD_MESSAGES","GUILD_MEMBERS","GUILD_BANS","GUILD_VOICE_STATES"],presence:{status:"dnd",activities:[{type:"WATCHING",name:"the loading screen"}]}}),Util_1.default.setClient(exports.client).setDatabase(database_1.default),require("discord-logs")(exports.client);const util_1=require("util");exports.shard="[Shard N/A]",exports.linkRates=new Map,exports.client.once("shardReady",(async(e,t=new Set)=>{let s=Date.now();exports.shard=`[Shard ${e}]`,exports.client.loading=!0;let r=Date.now();(0,slash_1.registerCommands)(exports.client).then((e=>{console.log(`${exports.shard} Refreshed slash commands for ${e.length}/${exports.client.guilds.cache.size} guilds. [${(0,pretty_ms_1.default)(Date.now()-r)}]`)})),console.log(`${exports.shard} Ready as ${exports.client.user?.tag}! Caching guilds.`);let a=new Set([...Array.from(t),...exports.client.guilds.cache.map((e=>e.id))]),o=Date.now();await database_1.default.cacheGSets(a),await database_1.default.cacheGuilds(a),console.log(`${exports.shard} All ${a.size} guilds have been cached. Processing available guilds. [${Date.now()-o}ms]`);for(const e of a)exports.linkRates.set(e,new Set);let n=Date.now(),i=0,l=setInterval((()=>exports.client.user?.setPresence({status:"dnd",activities:[{type:"WATCHING",name:`${Math.floor(i/exports.client.guilds.cache.size*100)}%`}]})),1e3);await Promise.all(exports.client.guilds.cache.map((async e=>{await(0,prepareGuilds_1.default)(e),a.delete(e.id),i++}))),a=void 0,clearInterval(l),console.log(`${exports.shard} All ${exports.client.guilds.cache.size} available guilds have been processed. [${Date.now()-n}ms]`),(0,tickers_1.default)(exports.client),exports.client.loading=!1,console.log(`${exports.shard} Ready in ${(0,pretty_ms_1.default)(Date.now()-s)}`),exports.client.manager=(0,lava_1.default)(exports.client),exports.client.on("raw",(e=>exports.client.manager.updateVoiceState(e)))}));const eventFiles=fs_1.default.readdirSync(__dirname+"/events/").filter((e=>e.endsWith(".js")));for(const e of eventFiles){const t=require(`./events/${e}`);t.once?exports.client.once(t.name,t.run):exports.client.on(t.name,t.run)}exports.client.on("error",(e=>console.error(exports.shard,`Client error. ${(0,util_1.inspect)(e)}`))),exports.client.on("rateLimit",(e=>console.warn(exports.shard,`Rate limited.\n${(0,util_1.inspect)(e)}`))),exports.client.on("shardDisconnected",(({code:e,reason:t})=>console.warn(exports.shard,`Disconnected. (${e} - ${t})`))),exports.client.on("shardError",(e=>console.error(exports.shard,`Error. ${(0,util_1.inspect)(e)}`))),exports.client.on("shardResume",((e,t)=>console.warn(exports.shard,`Resumed. ${t} replayed events.`))),exports.client.on("warn",(e=>console.warn(exports.shard,`Warning. ${e}`))),database_1.default.connection.then((()=>exports.client.login())).catch((e=>{console.error(exports.shard,e),exports.client.shard.send("respawn")})),process.on("unhandledRejection",(e=>console.error(exports.shard,"unhandledRejection:",e))),process.on("uncaughtException",(e=>console.error(exports.shard,"uncaughtException:",e)));