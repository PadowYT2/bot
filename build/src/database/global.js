"use strict";const mongoose_1=require("mongoose"),dbCache=new Map,dbSaveQueue=new Map,globalObject={maintenance:!1,debug:!1,generatedIds:[]},globalSchema=new mongoose_1.Schema(globalObject,{minimize:!0}),Global=(0,mongoose_1.model)("Global",globalSchema),get=()=>new Promise(((e,a)=>Global.findOne({},((l,b)=>l?a(l):(b||(b=new Global(globalObject)),e(b)))))),load=async()=>{let e=await get(),a={},l=globalObject;for(const b in l)a[b]=e[b]||l[b];return dbCache.set("global",a)},save=async e=>{dbSaveQueue.set("global",e);let a=await get(),l=dbCache.get("global"),b=dbSaveQueue.get("global");for(const e of b)a[e]=l[e];return a.save().then((()=>{let e=dbSaveQueue.get("global");e.length>b.length?(dbSaveQueue.delete("global"),save(e.filter((e=>!b.includes(e))))):dbSaveQueue.delete("global")})).catch(console.log)};dbCache.has("global")||(async()=>{await load()})(),module.exports={reload:()=>load(),unload:()=>dbCache.delete("global"),get:()=>Object.assign({},dbCache.get("global")),set:(e,a)=>(dbCache.get("global")[e]=a,save([e]),dbCache.get("global")),setMultiple:e=>{let a=dbCache.get("global");return Object.assign(a,e),save(Object.keys(e)),dbCache.get("global")},addToArray:(e,a)=>(dbCache.get("global")[e].push(a),save([e]),dbCache.get("global")),removeFromArray:(e,a)=>(dbCache.get("global")[e]=dbCache.get("global")[e].filter((e=>e!==a)),save([e]),dbCache.get("global")),setOnObject:(e,a,l)=>(dbCache.get("global")[e][a]=l,save([e]),dbCache.get("global")),removeFromObject:(e,a)=>(delete dbCache.get("global")[e][a],save([e]),dbCache.get("global")),reset:()=>{let e=dbCache.get("global");return Object.assign(e,globalObject),save(Object.keys(globalObject)),dbCache.get("global")}};