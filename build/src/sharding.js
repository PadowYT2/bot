"use strict";var __importDefault=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(exports,"__esModule",{value:!0}),exports.manager=void 0,require("nodejs-better-console").overrideConsole();const discord_js_1=require("discord.js"),readline_1=__importDefault(require("readline")),config_1=__importDefault(require("../config")),util_1=require("util"),read=readline_1.default.createInterface({input:process.stdin,output:process.stdout});exports.manager=new discord_js_1.ShardingManager(__dirname+"/bot.js",{token:config_1.default.token,mode:"worker"}),exports.manager.on("shardCreate",(e=>{e.on("message",(r=>{"respawn"==r&&(console.warn(`[Manager] Shard ${e.id} has requested a restart.`),e.respawn())})),console.log(`[Manager] Shard ${e.id} is starting.`)})),config_1.default.port&&require("./web/")(),exports.manager.spawn(),process.on("unhandledRejection",(e=>console.error("[Manager]","unhandledRejection:",e))),process.on("uncaughtException",(e=>console.error("[Manager]","uncaughtException:",e))),read.on("line",(async line=>{if(!line)return;const[cmd,...args]=line.split(" ");let _manager=exports.manager;if(console.log(`[Manager CLI] Received command: ${line}`),"eval"===cmd){const script=args.join(" ");console.log(`[Manager CLI] Evaluating: ${script}`);try{console.log("[Manager CLI] Result:",(0,util_1.inspect)(await eval(script),{depth:2}))}catch(e){console.error(`[Manager CLI] Error: ${e}`)}}else if("beval"===cmd){let shard=parseInt(args[0]);isNaN(shard)&&(shard=void 0);const script=args.slice(1).join(" ");console.log(`[Manager CLI] Evaluating on ${void 0!==shard?`shard ${shard}`:"all shards"}: ${script}`);try{const result=await _manager.broadcastEval((async(bot,{script:script})=>await eval(script)),{shard:shard,context:{script:script}});console.log("[Manager CLI] Result:",(0,util_1.inspect)(result,{depth:2}))}catch(e){console.error("[Manager CLI] Error:",e)}}else if("respawn"===cmd){let e=parseInt(args[0]);if(isNaN(e)){const e=args.slice(1).reduce(((e,r)=>{const[a,s]=r.split("=");return e[a]=s,e}),{shardDelay:5e3,respawnDelay:500,timeout:-1});console.log(`[Manager CLI] Respawning all shards with ${JSON.stringify(e)}`),await _manager.respawnAll(e)}else{const r=args.slice(1).reduce(((e,r)=>{const[a,s]=r.split("=");return e[a]=s,e}),{delay:500,timeout:-1});console.log(`[Manager CLI] Respawning shard ${e} with ${JSON.stringify(r)}`),await _manager.shards.get(e).respawn(r)}}}));