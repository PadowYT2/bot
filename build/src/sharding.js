"use strict";var __importDefault=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(exports,"__esModule",{value:!0}),exports.manager=void 0,require("nodejs-better-console").overrideConsole();const discord_js_1=require("discord.js"),readline_1=__importDefault(require("readline")),node_fetch_1=__importDefault(require("node-fetch")),config_1=__importDefault(require("../config")),util_1=require("util"),read=readline_1.default.createInterface({input:process.stdin,output:process.stdout});async function postStats(){const e={sdc:{shards:exports.manager.shards.size,servers:await exports.manager.broadcastEval((e=>e.guilds.cache.size)).then((e=>e.reduce(((e,a)=>e+a),0)))},bc:{servers:await exports.manager.broadcastEval((e=>e.guilds.cache.size)).then((e=>e.reduce(((e,a)=>e+a),0))),shards:exports.manager.shards.size,users:await exports.manager.broadcastEval((e=>e.guilds.cache.map((e=>e.memberCount)).reduce(((e,a)=>e+a)))).then((e=>e.reduce(((e,a)=>e+a),0)))}};await(0,node_fetch_1.default)("https://api.server-discord.com/v2/bots/889214509544247306/stats",{method:"POST",headers:{Authorization:`SDC ${config_1.default.monitoring.sdc}`,"Content-Type":"application/json"},body:JSON.stringify(e.sdc)}).then((async e=>{if(200!==e.status)return console.error(`[Manager] Failed to post stats to SDC: ${e.status} ${await e.text()}`)})),await(0,node_fetch_1.default)("https://api.boticord.top/v1/stats",{method:"POST",headers:{Authorization:config_1.default.monitoring.bc,"Content-Type":"application/json"},body:JSON.stringify(e.bc)}).then((async e=>200!==e.status?console.error(`[Manager] Failed to post stats to BC: ${e.status} ${await e.text()}`):(await e.json()).ok?void 0:console.error(`[Manager] Failed to post stats to BC: ${await e.text()}`)))}exports.manager=new discord_js_1.ShardingManager(__dirname+"/bot.js",{token:config_1.default.token,mode:"worker"}),exports.manager.on("shardCreate",(e=>{e.on("message",(a=>{"respawn"==a&&(console.warn(`[Manager] Shard ${e.id} has requested a restart.`),e.respawn())})),console.log(`[Manager] Shard ${e.id} is starting.`)})),config_1.default.port&&require("./web/")(),exports.manager.spawn().then((()=>{setTimeout((async()=>{config_1.default.monitoring.sdc&&config_1.default.monitoring.bc&&(setInterval((async()=>{await postStats()}),36e5),await postStats())}),6e4)})),process.on("unhandledRejection",(e=>console.error("[Manager]","unhandledRejection:",e))),process.on("uncaughtException",(e=>console.error("[Manager]","uncaughtException:",e))),read.on("line",(async line=>{if(!line)return;const[cmd,...args]=line.split(" ");let _manager=exports.manager;if(console.log(`[Manager CLI] Received command: ${line}`),"eval"===cmd){const script=args.join(" ");console.log(`[Manager CLI] Evaluating: ${script}`);try{console.log("[Manager CLI] Result:",(0,util_1.inspect)(await eval(script),{depth:2}))}catch(e){console.error(`[Manager CLI] Error: ${e}`)}}else if("beval"===cmd){let shard=parseInt(args[0]);isNaN(shard)&&(shard=void 0);const script=args.slice(1).join(" ");console.log(`[Manager CLI] Evaluating on ${void 0!==shard?`shard ${shard}`:"all shards"}: ${script}`);try{const result=await _manager.broadcastEval((async(bot,{script:script})=>await eval(script)),{shard:shard,context:{script:script}});console.log("[Manager CLI] Result:",(0,util_1.inspect)(result,{depth:2}))}catch(e){console.error("[Manager CLI] Error:",e)}}else if("respawn"===cmd){let e=parseInt(args[0]);if(isNaN(e)){const e=args.slice(1).reduce(((e,a)=>{const[t,r]=a.split("=");return e[t]=r,e}),{shardDelay:5e3,respawnDelay:500,timeout:-1});console.log(`[Manager CLI] Respawning all shards with ${JSON.stringify(e)}`),await _manager.respawnAll(e)}else{const a=args.slice(1).reduce(((e,a)=>{const[t,r]=a.split("=");return e[t]=r,e}),{delay:500,timeout:-1});console.log(`[Manager CLI] Respawning shard ${e} with ${JSON.stringify(a)}`),await _manager.shards.get(e).respawn(a)}}}));